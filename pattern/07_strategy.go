// Strategy (Стратегия) это поведенческий паттерн проектирования, позволяющий выбор поведения алгоритма в ходе исполнения.
// Этот паттерн определяет алгоритмы, инкапсулирует их и использует их взаимозаменяемо.

// Когда использовать:
// -Когда объекту необходимо поддерживать другое поведение, и нужно изменить это поведение во время выполнения.
// -Когда требуется избежать множества условий выбора поведения во время выполнения.
// -Когда в программе разные похожие алгоритмы, и они отличаются только тем, как они выполняют определенное поведение.

// package main

// import "fmt"

package pattern

// Интерфейс, который должны реализовывать заменяемые алгоритмы.
type Operator interface {
	Apply(int, int) int
}

// Структура основного объекта работы. Она может содержать и другие поля
// Главная особенность в том, что она содержит поле типа intarface, которое приведено выше.
// Благодаря этому в данную структуру можно записывать другие структуры, реализующие интерфейс Operator.
type Operation struct {
	Operator Operator
}

// Метод структуры Operation, который вызывает метод Apply интерфейса Operator.
func (o *Operation) Operate(leftValue, rightValue int) int {
	return o.Operator.Apply(leftValue, rightValue)
}

// Структура сложения, реализующая интерфейс Operator.
type Add struct{}

func (Add) Apply(a, b int) int {
	return a + b
}

// Структура умножения, реализующая интерфейс Operator.
type Mul struct{}

func (Mul) Apply(a, b int) int {
	return a * b
}

// func main() {
// // Вызов алгоритма сложения через структуру Operation.
// 	add := Operation{Add{}}
// 	fmt.Println(add.Operate(3, 5))

// // Вызов алгоритма умножения через структуру Operation.
// 	mult := Operation{Mul{}}
// 	fmt.Println(mult.Operate(3, 5))
// }
